// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Therapy {
  id   String @id @default(uuid())
  name String @db.VarChar(100)

  egitim       String? @db.VarChar(100)
  lisans       String? @db.VarChar(100)
  yuksekLisans String? @db.VarChar(100)
  terapiEgtim  String? @db.VarChar(100)
  uzmanAlan    String? @db.VarChar(100)

  summery  String @db.VarChar(2000)
  imageUrl String @default("https://res.cloudinary.com/ddxser4ml/image/upload/txwk370nwk6kg6hxluxn.jpg") @db.VarChar(5000)

  therapyTypes  TherapyTypeTherapy[] // cocuk  // category
  therapyPlaces TherapyPlaceTherapy[]
  therapyUnvans TherapyUnvanTherapy[]
}

model TherapyType {
  id        String               @id @default(uuid())
  name      String @db.VarChar(100)
  therapies TherapyTypeTherapy[]
}

model TherapyTypeTherapy {
  id            String      @id @default(uuid())
  therapy       Therapy     @relation(fields: [therapyId], references: [id], onDelete: Cascade)
  therapyId     String 
  therapyType   TherapyType @relation(fields: [therapyTypeId], references: [id])
  therapyTypeId String
}

model TherapyPlace {
  id        String                @id @default(uuid())
  name      String @db.VarChar(100)
  therapies TherapyPlaceTherapy[]
}

model TherapyPlaceTherapy {
  id             String       @id @default(uuid())
  therapy        Therapy      @relation(fields: [therapyId], references: [id], onDelete: Cascade)
  therapyId      String
  therapyPlace   TherapyPlace @relation(fields: [therapyPlaceId], references: [id])
  therapyPlaceId String
}

model TherapyUnvan {
  id        String                @id @default(uuid())
  name      String @db.VarChar(100)
  therapies TherapyUnvanTherapy[]
}

model TherapyUnvanTherapy {
  id             String       @id @default(uuid())
  therapy        Therapy      @relation(fields: [therapyId], references: [id], onDelete: Cascade)
  therapyId      String
  therapyUnvan   TherapyUnvan @relation(fields: [therapyUnvanId], references: [id])
  therapyUnvanId String
}

model Blog {
  id       String @id @default(uuid())
  title    String @db.VarChar(100)
  summery  String @db.VarChar(10000)
  yazan    String @db.VarChar(100)
  imageUrl String @db.VarChar(5000)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  blogCategories BlogCategory[]
}

model Category {
  id           String         @id @default(uuid())
  name         String @db.VarChar(100)
  blogCategories BlogCategory[]
}

model BlogCategory {
  id         String   @id @default(uuid())
  blog       Blog     @relation(fields: [blogId], references: [id])
  blogId     String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
}
